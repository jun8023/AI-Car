#include "all.h"
//定义行列数
#define  X_MAX     130
#define  Y_MAX    190
//定义中线起始和终止位置
#define start   0
#define end     20
//确定跟随扫描点个数
#define scale   5
uint8   date[X_MAX+5][Y_MAX+15]={0};
uint8 buff[512] = {0x5A};
uint8 buffout[512] = {0};
union {
	uint8 date1[X_MAX][Y_MAX];
	uint8 img[50][512];
}DAT;
uint16  i=0,j=0,k=0,t=0;
uint8 OK_FLAG=0;
uint8 root1=0,root2=0,sensor[8]={0};
float sensor_driver=0;
uint8 flag_photo=0,read_date=0,temp_l=0,temp_r=0,time=0,ave_now=0,change_left=0,change_right=0;
uint8 center0,line_left=0,line_right=0,left_start,right_start,left_end,right_end;
uint8 left=0,right=0,center[X_MAX],left_flag=0,right_flag=0,left_last,right_last;
uint32 dif=0;
//边线扫描算法
uint8 left_line[500][2],right_line[500][2];uint16 left_dot=0,right_dot=0,left_10[2],left_10_i,left_10_j,ones_ok=0;
int8 dot_sub=0,dot_num=15;
uint8 scan_mode_left=0,scan_mode_right=0,tepy=0;//表明赛道类型;//0表示行扫描，1表示列扫描
uint8 left_h_dir=0,left_l_dir=0,right_h_dir=0,right_l_dir=0;//设定转换时扫描方向  小于0表示按递减  1表示按递增
uint8 error_times_left=0,error_times_right=0,left_i=0,left_j=0,right_i=0,right_j=0,hang_dir=0,lie_dir=0,left_end_flag=1,right_end_flag=1;//0表示搜完了
uint32 temp;
float test=0;
uint8 white=120,dark=100;
void main()
 {
     SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
     DisableInterrupts
         //VSYNC中断
         GPIO_INIT(VSYNC_PORT,VSYNC_PIN,INPUT);
     GPIOPULL_SET(VSYNC_PORT,VSYNC_PIN,PULL_UP);
     Enable_IRQ(INT_PORTC);
     GPIOINT_Enable(VSYNC_PORT,VSYNC_PIN,LEVEL_FALLING);
     
     //HREF中断
     GPIO_INIT(HREF_PORT,HREF_PIN,INPUT);
     GPIOPULL_SET(HREF_PORT,HREF_PIN,PULL_DOWN);
     
     //PCLK中断
     GPIO_INIT(PCLK_PORT,PCKL_PIN,INPUT);
     GPIOPULL_SET(PCLK_PORT,PCKL_PIN,PULL_DOWN);
     GPIOINT_Enable(PCLK_PORT,PCKL_PIN,DMA_RISING);
     
     //DMA初始化
     DMA_Init_new(DMAMUX0, DMA_CH0,Src_PORTC,Y_MAX+15,1,DMA_Normal_Mode);
     DMA_Source_new(DMA_CH0, 0X400FF0D0,0, DMA_8BIT, 0);
     DMA_Destination_new(DMA_CH0, date,1, DMA_8BIT, 0);
     //DMA_Int_Enable(DMA_CH0,DMA_MAJOR);
     //设置输入端口
     GPIO_INIT(PORTD,0,INPUT);
     GPIO_INIT(PORTD,1,INPUT);
     GPIO_INIT(PORTD,2,INPUT);
     GPIO_INIT(PORTD,3,INPUT);
     GPIO_INIT(PORTD,4,INPUT);
     GPIO_INIT(PORTD,5,INPUT);  
     GPIO_INIT(PORTD,6,INPUT);
     GPIO_INIT(PORTD,7,INPUT);
     GPIOPULL_SET(PORTD,0,PULL_DOWN);
     GPIOPULL_SET(PORTD,1,PULL_DOWN);
     GPIOPULL_SET(PORTD,2,PULL_DOWN);
     GPIOPULL_SET(PORTD,3,PULL_DOWN);
     GPIOPULL_SET(PORTD,4,PULL_DOWN);
     GPIOPULL_SET(PORTD,5,PULL_DOWN);
     GPIOPULL_SET(PORTD,6,PULL_DOWN);
     GPIOPULL_SET(PORTD,7,PULL_DOWN);
     
     //UART
     GPIOType_UART(PORTB_16_17);
     UART_INIT(UART0,75000,115200);
     UART_FIFO_read_init(UART0);
     Enable_IRQ(61);
     UARTINT_Enable(UART0,RIE);
     
     //SCCB_INIT
     SCCB_init();
     while(!SCCB_Catch());
     
     //舵机初始化
     servo_driver_init();
     
     //电机初始化
     motor_PWM_init();
     //SD初始化
    GPIO_INIT(RST_PORT,RST_PIN,1);
    GPIO_INIT(DC_PORT,DC_PIN,1);
    GPIO_INIT(CS_PORT,CS_PIN,1);
    GPIO_DSE(CS_PORT,CS_PIN);
//	SPILCD_CS_SET;
    GPIOType_SPI(SPI2,SPI2_PCS0_PTB20,SPI2_SCK_PTB21,SPI2_SOUT_PTB22,SPI2_SIN_PTB23);
    SPI_init(SPI2,MASTER);
     SD_Init();
     //优先级设置
     SET_IRQ_PRIOR(INT_PORTC,0);
     SET_IRQ_PRIOR(61,2);
     
     EnableInterrupts
     while(1)
      {
              if(flag_photo)
               {
                   flag_photo=0;
#if    1        //二值化
                   dif=white-dark;
                   for(i=0;i<X_MAX;i++)
                       for(j=0;j<Y_MAX;j++)
                        {
                            if(date[i][j]>=white-dif*2/3)
                                date[i][j]=254;
                            if(date[i][j]<=dark+dif*2/3)
                                date[i][j]=1;
                        }
#endif
 #if     1           //边缘扫描算法		//参数初始化
                   scan_mode_left=scan_mode_right=0;//0表示行扫描，1表示列扫描
				   left_dot=0;right_dot=0;		//采到的左右点数
                    left_h_dir=0;left_l_dir=0;		//左右前进方向
					right_h_dir=0;right_l_dir=0;		//左右前进方向
					left_flag=0,right_flag=0;	//是否采集到点标志位
					left_i=right_i=0;
					left_j=right_j=0;
					tepy=0;//表明赛道类型
					left_end_flag=1,right_end_flag=1;//扫完了置0
                   for(i=start;!(((left_flag==1)&&(right_flag==1))&&(i>=end));i++)   //先扫前几行，确定有效边界
                    {
                        left=0;right=Y_MAX;
                        for(j=Y_MAX/2;j>3;j--)
                         {
                             if((date[i][j+2]>date[i][j-2])&&(date[i][j+1]>date[i][j-1]))
                              {
                                  left=j;
								  left_flag=1;
                                  break;
                              }
							 left_flag=0;
                         }
                        left_line[left_dot][0]=i;left_line[left_dot][1]=left;left_dot++;
                        for(j=Y_MAX/2;j<Y_MAX-3;j++)
                         {
                             if((date[i][j-1]>date[i][j])&&(date[i][j-2]>date[i][j+1]))
                              {
                                  right=j;
								  right_flag=1;
                                  break;
                              }
							 right_flag=0;
                         }
                        right_line[right_dot][0]=i;right_line[right_dot][1]=right;right_dot++;
                    }

						//左右连线
					for(left_i=right_i=i,left_j=left_line[left_dot-1][1],right_j=right_line[right_dot-1][1];left_end_flag||right_end_flag;)
					{
						//非行扫描确定赛道类型
						if(change_right&change_left)//确定扫描方式
						{
							change_right=change_left=0;//一幅图片只进来一次
							if((date[left_line[left_dot-1][0]+2][left_line[left_dot-1][1]-1]==254)&&(date[left_line[left_dot-1][0]+2][left_line[left_dot-1][1]]==254))
							{
								left_l_dir=0;//向减小方向扫
							}
							else left_l_dir=1;//向增大方向扫
							if((date[right_line[right_dot-1][0]+2][right_line[right_dot-1][1]-1]==254)&&(date[right_line[right_dot-1][0]+2][right_line[right_dot-1][1]]==254))
							{
								right_l_dir=1;//向增大方向扫
							}
							else right_l_dir=0;//向减小方向扫
							if(left_l_dir&right_l_dir) tepy=1;//遇到直角或弯道，向增大偏
							else if(!(left_l_dir|right_l_dir)) tepy=2;//遇到直角或弯道，向减小偏
							else tepy=3;		//遇到十字
							scan_mode_left=scan_mode_right=1;//开始竖着扫
							left_j=left_line[left_dot-1][1];
							right_j=right_line[right_dot-1][1];
						}
							if(!(scan_mode_left|scan_mode_right))//两个都是行扫描方式
							{
								if(!change_left)//左边找不到，停止
								{
									root1=left_line[left_dot-1][1];
							//	root1=left_line[left_dot-1][1]-left_line[left_dot-2][1]+left_line[left_dot-1][1];
								if(date[left_i][root1]==254)//如果上面那个为白点，往左搜
								{
									if(root1<scale) left_end=3; else left_end=root1-scale;
									for(left_j=root1;left_j>left_end;left_j--)
									{
										if((date[left_i][left_j+2]>date[left_i][left_j-1])&&(date[left_i][left_j+1]>date[left_i][left_j]))
										   {
											   left=left_j;
											   error_times_left=0;
											   left_flag=1;//表示采集到左边缘
											   left_line[left_dot][0]=left_i;left_line[left_dot][1]=left;left_dot++;
											   break;
										   }
										left_flag=0;
									}
									if(left_flag==0) error_times_left++;
									if(error_times_left>=1) change_left=1;
								}
								else 
								{
									if(root1+scale>Y_MAX-3) left_end=Y_MAX-3; else left_end=root1+scale;
									for(left_j=root1;left_j<left_end;left_j++)
									{
										if((date[left_i][left_j+2]>date[left_i][left_j-1])&&(date[left_i][left_j+1]>date[left_i][left_j]))
										   {
											   left=left_j;
											   error_times_left=0;
											   left_flag=1;//表示采集到左边缘
											   left_line[left_dot][0]=left_i;left_line[left_dot][1]=left;left_dot++;
											   break;
										   }
										left_flag=0;
									}
                                    
										if(left_flag==0) error_times_left++;
										if(error_times_left>=1) change_left=1;
								}
								left_i++;
                                }
								if(!change_right)//右边找 不到，停止
								{
								root2=right_line[right_dot-1][1];
							//	root2=right_line[right_dot-1][1]-right_line[right_dot-2][1]+right_line[right_dot-1][1];
								if(date[right_i][root2]==254)//如果上面那个为白点，往右搜
								{
									if(root2+scale>Y_MAX-3) right_end=Y_MAX-3; else right_end=root2+scale;
									for(right_j=root2;right_j<right_end;right_j++)
									{
										if((date[right_i][right_j-2]>date[right_i][right_j+1])&&(date[right_i][right_j-1]>date[right_i][right_j]))
										   {
											   right=right_j;
											   error_times_right=0;
											   right_flag=1;//表示采集到右边缘
											   right_line[right_dot][0]=right_i;right_line[right_dot][1]=right;right_dot++;
											   break;
										   }
										right_flag=0;
									}
									if(right_flag==0) error_times_right++;if(error_times_right>=1) change_right=1;
								}
								else 
								{
									if(root2<scale) right_end=3; else right_end=root2-scale;
									for(right_j=root2;right_j>right_end;right_j--)
									{
										if((date[right_i][right_j-2]>date[right_i][right_j+1])&&(date[right_i][right_j-1]>date[right_i][right_j]))
										   {
											   right=right_j;
											   error_times_right=0;
											   right_flag=1;//表示采集到左边缘
											   right_line[right_dot][0]=right_i;right_line[right_dot][1]=right;right_dot++;
											   break;
										   }
										right_flag=0;
									}
									if(right_flag==0) error_times_right++;if(error_times_right>=1) change_right=1;
								}
                                 right_i++;
								}
							}
						switch(tepy)		//说明是其中之一，执行完break;
						{
						case 1:
							{
								if(left_end_flag)	//左边没找完，竖着找
								{
									root1=left_line[left_dot-1][0];
								//	root1=left_line[left_dot-1][0]-left_line[left_dot-2][0]+left_line[left_dot-1][0];
									if(date[root1][left_j]==254)//如果上面那个为白点，往左搜
									{
										if(root1<scale) left_end=3; else left_end=root1+scale;
										for(left_i=root1;left_i<left_end;left_i++)
										{
											if((date[left_i-2][left_j]>date[left_i+1][left_j])&&(date[left_i-1][left_j]>date[left_i][left_j]))
											   {
												   left=left_i;
												   error_times_left=0;
												   left_flag=1;//表示采集到左边缘
												   left_line[left_dot][0]=left;left_line[left_dot][1]=left_j;left_dot++;
												   break;
											   }
											left_flag=0;
										}
									}
									else 
									{
										if(root1+scale>Y_MAX-3) left_end=Y_MAX-3; else left_end=root1-scale;
										for(left_i=root1;left_i>left_end;left_i--)
										{
											if((date[left_i-2][left_j]>date[left_i+1][left_j])&&(date[left_i-1][left_j]>date[left_i][left_j]))
											   {
													left=left_i;
												   error_times_left=0;
												   left_flag=1;//表示采集到左边缘
												   left_line[left_dot][0]=left;left_line[left_dot][1]=left_j;left_dot++;
												   break;
											   }
											left_flag=0;
										}
									}
								left_j++;
								}
								if(right_end_flag)//右边没找完，竖着找
								{
									root2=right_line[right_dot-1][0];
								//	root2=right_line[right_dot-1][0]-right_line[right_dot-2][0]+right_line[right_dot-1][0];
									if(date[root2][right_j]==1)//如果上面那个为黑点，往上搜
									{
										if(root2<scale) right_end=3; else right_end=root2+scale;
										for(right_i=root2;right_i<right_end;right_i++)
										{
											if((date[right_i+2][right_j]>date[right_i-1][right_j])&&(date[right_i+1][right_j]>date[right_i][right_j]))
											   {
												   right=right_i;
												   error_times_right=0;
												   right_flag=1;//表示采集到左边缘
												   right_line[right_dot][0]=right;right_line[right_dot][1]=right_j;right_dot++;
												   break;
											   }
											right_flag=0;
										}
									}
									else 
									{
										if(root2+scale>Y_MAX-3) right_end=Y_MAX-3; else right_end=root2-scale;
										for(right_i=root2;right_i>right_end;right_i--)
										{
											if((date[right_i+2][right_j]>date[right_i-1][right_j])&&(date[right_i+1][right_j]>date[right_i][right_j]))
											   {
													right=right_i;
												   error_times_right=0;
												   right_flag=1;//表示采集到左边缘
												   right_line[right_dot][0]=right;right_line[right_dot][1]=right_j;right_dot++;
												   break;
											   }
											right_flag=0;
										}
									}
								right_j++;
								}
							}break;
						case 2:
							{
								if(left_end_flag)	//左边没找完，竖着找
								{
									root1=left_line[left_dot-1][0];
								//	root1=left_line[left_dot-1][0]-left_line[left_dot-2][0]+left_line[left_dot-1][0];
									if(date[root1][left_j]==254)//如果上面那个为白点，往shang搜
									{
										if(root1<scale) left_end=3; else left_end=root1-scale;
										for(left_i=root1;left_i>left_end;left_i--)
										{
											if((date[left_i-2][left_j]<date[left_i+1][left_j])&&(date[left_i-1][left_j]<date[left_i][left_j]))
											   {
												   left=left_i;
												   error_times_left=0;
												   left_flag=1;//表示采集到左边缘
												   left_line[left_dot][0]=left;left_line[left_dot][1]=left_j;left_dot++;
												   break;
											   }
											left_flag=0;
										}
									}
									else 
									{
										if(root1+scale>Y_MAX-3) left_end=Y_MAX-3; else left_end=root1+scale;
										for(left_i=root1;left_i<left_end;left_i++)
										{
											if((date[left_i-2][left_j]<date[left_i+1][left_j])&&(date[left_i-1][left_j]<date[left_i][left_j]))
											   {
													left=left_i;
												   error_times_left=0;
												   left_flag=1;//表示采集到左边缘
												   left_line[left_dot][0]=left;left_line[left_dot][1]=left_j;left_dot++;
												   break;
											   }
											left_flag=0;
										}
									}
								left_j--;
								}
								if(right_end_flag)//右边没找完，竖着找
								{
									root2=right_line[right_dot-1][0];
								//	root2=right_line[right_dot-1][0]-right_line[right_dot-2][0]+right_line[right_dot-1][0];
									if(date[root2][right_j]==1)//如果上面那个为黑点，往上搜
									{
										if(root2<scale) right_end=3; else right_end=root2-scale;
										for(right_i=root2;right_i>right_end;right_i--)
										{
											if((date[right_i+2][right_j]<date[right_i-1][right_j])&&(date[right_i+1][right_j]<date[right_i][right_j]))
											   {
												   right=right_i;
												   error_times_right=0;
												   right_flag=1;//表示采集到左边缘
												   right_line[right_dot][0]=right;right_line[right_dot][1]=right_j;right_dot++;
												   break;
											   }
											right_flag=0;
										}
									}
									else 
									{
										if(root2+scale>Y_MAX-3) right_end=Y_MAX-3; else right_end=root2+scale;
										for(right_i=root2;right_i<right_end;right_i++)
										{
											if((date[right_i+2][right_j]<date[right_i-1][right_j])&&(date[right_i+1][right_j]<date[right_i][right_j]))
											   {
													right=right_i;
												   error_times_right=0;
												   right_flag=1;//表示采集到左边缘
												   right_line[right_dot][0]=right;right_line[right_dot][1]=right_j;right_dot++;
												   break;
											   }
											right_flag=0;
										}
									}
								right_j--;
								}
							}break;
						case 3:{
							right_i++;left_i++;
							   }
						}
						left_end_flag=((left_i>3)&&(left_i<X_MAX-3)&&(left_j>3)&&(left_j<Y_MAX-3));//到了边界，置0
						right_end_flag=((right_i>3)&&(right_i<X_MAX-3)&&(right_j>3)&&(right_j<Y_MAX-3));
					}	
#endif     
                   //UART_S1(UART0,0XFF);
                   for(j=0;j<3;j++)
                   for(i=0;i<dot_num;i++)
                    {
                        date[(left_line[left_dot/dot_num*i][0]+right_line[right_dot/dot_num*i][0])/2+j][(left_line[left_dot/dot_num*i][1]+right_line[right_dot/dot_num*i][1])/2]=0;
                    }
                   /*for(i=0;i<left_dot;i++)
                    {
                        date[left_line[i][0]+2][left_line[i][1]+2]=0;
                    }
                   for(i=0;i<right_dot;i++)
                    {
                        date[right_line[i][0]][right_line[i][1]]=0;
                    }*/
                   /*UART_SS(UART0,"image");
                   for(i=X_MAX;i>0;i--)
                       for(j=Y_MAX;j>0;j--)
                           UART_S1(UART0,date[i][j]);*/
                   
                   //UART_SS(UART0,"image");
                   /*for(i=0;i<X_MAX;i++)
                       for(j=0;j<Y_MAX;j++)
                        {if(date[i][j]==0)
                            {
                                date[i][j]=1;
                            }
                           UART_S1(UART0,date[i][j]);
                        }*/
          
          for (i=0;i<512;i++)
              buff[i]=0x5A;
          for (i=0;i<X_MAX;i++)
              for (j=0;j<Y_MAX;j++)
                  DAT.date1[i][j]=date[i][j];
          SD_WriteMultiSectors(buff,800,1);
          for (i=0;i<50;i++)
          SD_WriteMultiSectors(DAT.img[0],801,50);
                   i=0;j=0;
                   EnableInterrupts
                   GPIOINT_Clear(PORTC);
                   Enable_IRQ(INT_PORTC);
                   GPIOINT_Enable(VSYNC_PORT,VSYNC_PIN,LEVEL_RISING);
               }
          }
 }

void PORTC_IRQHandler(void)
 {
     uint32 port_date=PORTC_ISFR;
     if(port_date&0X8000)
      {
          PORTC_ISFR|=0X8000;
#if 0//隔行扫描
          if(i%2==0)
           {
               DMA_Enable_new(DMAMUX0,DMA_CH0);
               if(i>=X_MAX*2)
                {
                    flag_photo=1;
                    Disable_IRQ(INT_PORTC);
                    DisableInterrupts;
                    GPIOINT_Disable(HREF_PORT,HREF_PIN);
                    DMA_Disable_new(DMAMUX0,DMA_CH0);
                    DMA_SetDestAddress(DMA_CH0, date);       
                }
           }le_new(DMAMUX0,DMA_CH0);
#endif
#if 1   //逐行扫描
          if(i>5)
          DMA_Enable_new(DMAMUX0,DMA_CH0);
#endif
          if(i>=X_MAX+5)
           {
               flag_photo=1;
               Disable_IRQ(INT_PORTC);
               DisableInterrupts;
               GPIOINT_Disable(HREF_PORT,HREF_PIN);
               DMA_Disable_new(DMAMUX0,DMA_CH0);
               DMA_SetDestAddress(DMA_CH0, date);       
           }
          i++;
      }
     if(port_date&0X20000)
      {
          PORTC_ISFR|=0X20000;
          GPIOINT_Disable(VSYNC_PORT,VSYNC_PIN);
          GPIOINT_Enable(HREF_PORT,HREF_PIN,LEVEL_RISING);
      }
 }

void DMA0_DMA16_IRQHandler(void)
 {
     DMA_Clear_Int(DMA_CH0);
 }
void UART0_RX_TX_IRQHandler(void)
 {
     UART_FIFO_Read_value(UART0,sensor);
     read_pose(UART0,sensor);
 }